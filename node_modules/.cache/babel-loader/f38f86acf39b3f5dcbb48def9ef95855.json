{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  lista: [],\n  listb: [],\n  selectedList: \"\",\n  finallist: []\n};\nexport const ListSlice = createSlice({\n  name: 'list',\n  initialState,\n  reducers: {\n    addInList: (state, action) => {\n      if (action.payload.type === \"lista\") {\n        state.lista.push(action.payload.list);\n      } else if (action.payload.type === \"listb\") {\n        state.listb.push(action.payload.list);\n      }\n\n      state.finallist.push(action.payload.list);\n    },\n    choosenList: (state, action) => {\n      state.selectedList = action.payload;\n      console.log(state.selectedList);\n\n      if (state.selectedList === \"lista\") {\n        state.finallist = state.lista;\n      } else if (state.selectedList === \"listb\") {\n        state.finallist = state.listb;\n      } else if (state.selectedList === \"combab\") {\n        state.finallist = state.lista.concat(state.listb);\n      } else if (state.selectedList === \"uniab\") {\n        state.finallist = state.lista.filter(value => state.listb.includes(value)); //   console.log(pt);\n      }\n    },\n    returnLista: state => {\n      return state.lista;\n    },\n    returnListb: state => {\n      return state.listb;\n    },\n    returnListaAndb: state => {\n      return state.lista.push.apply(state.listb);\n    } // returnListaOrb:\n\n  }\n});\nexport const {\n  addInList,\n  returnLista,\n  returnListaAndb,\n  returnListb,\n  choosenList\n} = ListSlice.actions;\nexport default ListSlice.reducer;","map":{"version":3,"sources":["C:/Users/pt/Desktop/React Projects/1-Birthday_Intro - Copy/src/Store/ListSlice.jsx"],"names":["createSlice","initialState","lista","listb","selectedList","finallist","ListSlice","name","reducers","addInList","state","action","payload","type","push","list","choosenList","console","log","concat","filter","value","includes","returnLista","returnListb","returnListaAndb","apply","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAGA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAC,EADS;AAEfC,EAAAA,KAAK,EAAC,EAFS;AAGfC,EAAAA,YAAY,EAAC,EAHE;AAIfC,EAAAA,SAAS,EAAC;AAJK,CAAnB;AAMA,OAAO,MAAMC,SAAS,GAACN,WAAW,CAAC;AAC/BO,EAAAA,IAAI,EAAC,MAD0B;AAE/BN,EAAAA,YAF+B;AAG/BO,EAAAA,QAAQ,EAAC;AACLC,IAAAA,SAAS,EAAC,CAACC,KAAD,EAAOC,MAAP,KAAgB;AACrB,UAAGA,MAAM,CAACC,OAAP,CAAeC,IAAf,KAAsB,OAAzB,EAAiC;AAEjCH,QAAAA,KAAK,CAACR,KAAN,CAAYY,IAAZ,CAAiBH,MAAM,CAACC,OAAP,CAAeG,IAAhC;AAGC,OALD,MAMK,IAAGJ,MAAM,CAACC,OAAP,CAAeC,IAAf,KAAsB,OAAzB,EAAiC;AAElCH,QAAAA,KAAK,CAACP,KAAN,CAAYW,IAAZ,CAAiBH,MAAM,CAACC,OAAP,CAAeG,IAAhC;AACA;;AAERL,MAAAA,KAAK,CAACL,SAAN,CAAgBS,IAAhB,CAAqBH,MAAM,CAACC,OAAP,CAAeG,IAApC;AACA,KAdI;AAeLC,IAAAA,WAAW,EAAC,CAACN,KAAD,EAAOC,MAAP,KAAgB;AACtBD,MAAAA,KAAK,CAACN,YAAN,GAAmBO,MAAM,CAACC,OAA1B;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACN,YAAlB;;AACA,UAAGM,KAAK,CAACN,YAAN,KAAqB,OAAxB,EAAgC;AAC5BM,QAAAA,KAAK,CAACL,SAAN,GAAgBK,KAAK,CAACR,KAAtB;AAEH,OAHD,MAIK,IAAGQ,KAAK,CAACN,YAAN,KAAqB,OAAxB,EAAgC;AACjCM,QAAAA,KAAK,CAACL,SAAN,GAAgBK,KAAK,CAACP,KAAtB;AACH,OAFI,MAGA,IAAGO,KAAK,CAACN,YAAN,KAAqB,QAAxB,EAAiC;AACpCM,QAAAA,KAAK,CAACL,SAAN,GAAgBK,KAAK,CAACR,KAAN,CAAYiB,MAAZ,CAAmBT,KAAK,CAACP,KAAzB,CAAhB;AAED,OAHI,MAIA,IAAGO,KAAK,CAACN,YAAN,KAAqB,OAAxB,EAAgC;AACjCM,QAAAA,KAAK,CAACL,SAAN,GAAgBK,KAAK,CAACR,KAAN,CAAYkB,MAAZ,CAAmBC,KAAK,IAAEX,KAAK,CAACP,KAAN,CAAYmB,QAAZ,CAAqBD,KAArB,CAA1B,CAAhB,CADiC,CAEnC;AACD;AAEN,KAlCI;AAmCLE,IAAAA,WAAW,EAAEb,KAAD,IAAS;AACjB,aAAOA,KAAK,CAACR,KAAb;AACH,KArCI;AAsCLsB,IAAAA,WAAW,EAAEd,KAAD,IAAS;AACjB,aAAOA,KAAK,CAACP,KAAb;AACH,KAxCI;AAyCLsB,IAAAA,eAAe,EAAEf,KAAD,IAAS;AACrB,aAAOA,KAAK,CAACR,KAAN,CAAYY,IAAZ,CAAiBY,KAAjB,CAAuBhB,KAAK,CAACP,KAA7B,CAAP;AACH,KA3CI,CA4CL;;AA5CK;AAHsB,CAAD,CAA3B;AAqDP,OAAO,MAAM;AAACM,EAAAA,SAAD;AAAWc,EAAAA,WAAX;AAAuBE,EAAAA,eAAvB;AAAuCD,EAAAA,WAAvC;AAAmDR,EAAAA;AAAnD,IAAgEV,SAAS,CAACqB,OAAhF;AACP,eAAerB,SAAS,CAACsB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState={\r\n    lista:[],\r\n    listb:[],\r\n    selectedList:\"\",\r\n    finallist:[],\r\n}\r\nexport const ListSlice=createSlice({\r\n    name:'list',\r\n    initialState,\r\n    reducers:{\r\n        addInList:(state,action)=>{\r\n             if(action.payload.type===\"lista\"){\r\n                \r\n             state.lista.push(action.payload.list); \r\n            \r\n             \r\n             }\r\n             else if(action.payload.type===\"listb\"){\r\n                \r\n                 state.listb.push(action.payload.list);\r\n                }\r\n                \r\n         state.finallist.push(action.payload.list);\r\n        },\r\n        choosenList:(state,action)=>{\r\n              state.selectedList=action.payload;\r\n              console.log(state.selectedList);\r\n              if(state.selectedList===\"lista\"){\r\n                  state.finallist=state.lista;\r\n                 \r\n              }\r\n              else if(state.selectedList===\"listb\"){\r\n                  state.finallist=state.listb;\r\n              }\r\n              else if(state.selectedList===\"combab\"){\r\n                state.finallist=state.lista.concat(state.listb);\r\n\r\n              }\r\n              else if(state.selectedList===\"uniab\"){\r\n                  state.finallist=state.lista.filter(value=>state.listb.includes(value));\r\n                //   console.log(pt);\r\n              }\r\n              \r\n        },\r\n        returnLista:(state)=>{\r\n            return state.lista;\r\n        },\r\n        returnListb:(state)=>{\r\n            return state.listb;\r\n        },\r\n        returnListaAndb:(state)=>{\r\n            return state.lista.push.apply(state.listb);\r\n        },\r\n        // returnListaOrb:\r\n\r\n        \r\n    }\r\n})\r\n\r\nexport const {addInList,returnLista,returnListaAndb,returnListb,choosenList}=ListSlice.actions;\r\nexport default ListSlice.reducer;"]},"metadata":{},"sourceType":"module"}